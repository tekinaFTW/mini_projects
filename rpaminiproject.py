# -*- coding: utf-8 -*-
"""RPAMiniProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Zap2DrtvKKg-VGuW8PvomjeZMu-Mqay
"""

import imaplib
import email
import os
import nltk
import time
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import svm
import numpy as np

# Download NLTK resources (comment out if already downloaded)
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

# Initialize WordNet lemmatizer
lemmatizer = WordNetLemmatizer()

# Prepare labeled training data (replace with your own data)
training_data = [
    ("urgent", "This email requires immediate attention! Please respond ASAP."),
    ("promotions", "Get 50% off your next purchase! Don't miss out!"),
    ("updates", "Important information regarding your account. Please review."),
    ("others", "This is a general email that doesn't fit the other categories."),
    # Realistic examples with longer emails
    ("urgent", "Dear valued customer, Your account has been temporarily suspended due to suspicious activity. Please verify your identity to restore access."),
    ("promotions", "Hello, We're excited to offer you an exclusive deal on our latest product line. Shop now and enjoy massive discounts on premium items."),
    ("updates", "Greetings, This is to inform you that our terms of service have been updated. Please take a moment to review the changes and accept them to continue using our platform."),
    ("others", "Hi there, Thank you for reaching out to our support team. We're currently experiencing a high volume of inquiries, but rest assured, we'll get back to you as soon as possible."),
    ("urgent", "Attention, Your subscription is expiring soon. Renew now to avoid any service interruptions."),
    ("promotions", "Hey, Check out our limited-time offer! Buy one, get one free on selected items. Don't miss out on this fantastic deal."),
    ("updates", "Dear user, We've implemented new security measures to safeguard your account. Please log in to review and update your security settings."),
    ("others", "Hello, This is a notification regarding your recent transaction. If you have any questions or concerns, please don't hesitate to contact us."),
    ("urgent", "Dear customer, Action required: Your payment method is about to expire. Please update your payment details to avoid any issues with your subscription."),
    ("promotions", "Hey there, We're celebrating our anniversary with amazing discounts! Join the party and enjoy incredible savings on all products."),
    ("updates", "Hi, We've rolled out an app update with exciting new features. Update now to access the latest enhancements."),
    ("others", "Hello, Thank you for your interest in our services. Our team is currently reviewing your application and will be in touch shortly.")
]

# Tokenize input text and generate input IDs and attention masks
input_texts = [text for _, text in training_data]
vectorizer = TfidfVectorizer(stop_words='english')
X_train = vectorizer.fit_transform(input_texts)
y_train = np.array([label for label, _ in training_data])

# Train the SVM model
model = svm.SVC(kernel='linear')
model.fit(X_train, y_train)

# Function to classify emails using the trained model
def classify_emails(emails):
    categorized_emails = {"urgent": [], "promotions": [], "updates": [], "others": []}
    for email_msg in emails:
        content = extract_content(email_msg)
        content_vectorized = vectorizer.transform([content])
        predicted_category = model.predict(content_vectorized)[0]
        categorized_emails[predicted_category].append(email_msg)
    return categorized_emails

# Function to fetch emails from a given IMAP server
def fetch_emails(username, password, server):
    mail = imaplib.IMAP4_SSL(server)
    mail.login(username, password)
    mail.select('inbox')
    _, data = mail.search(None, 'ALL')
    emails = []
    for num in data[0].split():
        _, msg_data = mail.fetch(num, '(RFC822)')
        msg = email.message_from_bytes(msg_data[0][1])
        emails.append(msg)
    mail.close()
    mail.logout()
    return emails

# Function to extract content from an email message
def extract_content(email_msg):
    content = ""
    if email_msg.is_multipart():
        for part in email_msg.walk():
            if part.get_content_type() == "text/plain":
                try:
                    content += part.get_payload(decode=True).decode('utf-8')
                except UnicodeDecodeError:
                    pass
    else:
        try:
            content = email_msg.get_payload(decode=True).decode('utf-8')
        except UnicodeDecodeError:
            pass
    return content

# Function to save classified emails to files in Colab environment
def save_classified_emails_colab(classified_emails):
    for category, emails in classified_emails.items():
        category_dir = f"./classifiedMails/{category}"
        if not os.path.exists(category_dir):
            os.makedirs(category_dir)

        for i, email_msg in enumerate(emails):
            email_content = extract_content(email_msg)  # Extract content from email message
            email_filename = f"{category}_{i}.txt"
            email_filepath = os.path.join(category_dir, email_filename)
            with open(email_filepath, "w") as file:
                file.write(email_content)

# Main function
def main():
    while True:
        try:
            # Usage (example)
            username = "anekettt@gmail.com"
            password = "mfie fjjr ytoi qong"
            server = "imap.gmail.com"

            # Fetch emails from the IMAP server
            emails = fetch_emails(username, password, server)

            # Perform classification on the extracted content
            classified_emails = classify_emails(emails)

            # Save classified emails to files in Colab environment
            save_classified_emails_colab(classified_emails)


            num_classified_emails = sum(len(email_list) for email_list in classified_emails.values())
            print(f"Classification of emails successful. Classified {num_classified_emails} emails.")

        except Exception as e:
          print(f"Error occurred: {str(e)}")

        # Sleep for 1 minute before checking again
        time.sleep(60)  # 1 minute in seconds

# Run the main function
if __name__ == "__main__":
    main()